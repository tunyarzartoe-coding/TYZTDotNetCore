@page "/blog/edit/{BlogId:int}"
@page "/blog/edit"
@using System.Text
@using static System.Net.Mime.MediaTypeNames
@inject HttpClient httpClient
@inject NavigationManager nav
@inject IJSRuntime jsRuntime



<PageTitle>Edit Blog</PageTitle>

@if (_blog is not null)
{
    <div class="mb-3">
        <label class="form-label">Title</label>
        <input type="text" class="form-control" @bind-value="_blog.BlogTitle">
    </div>
    <div class="mb-3">
        <label class="form-label">Author</label>
        <input type="text" class="form-control" @bind-value="_blog.BlogAuthor">
    </div>
    <div class="mb-3">
        <label class="form-label">Content</label>
        <input type="text" class="form-control" @bind-value="_blog.BlogContent">
    </div>
    <a href="/Blog" class="btn btn-outline-dark">Back</a>
    <button type="button" class="btn btn-success" @onclick="Update">Update</button>
}

@code {

    [Parameter]
    public int? BlogId { get; set; }

    private BlogModel? _blog = null;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var apiUrl = $"api/blog/{BlogId}";

            var response = await httpClient.GetAsync(apiUrl);
            if (!response.IsSuccessStatusCode)
            {
                nav.NavigateTo("/blog");
            }
            var jsonStr = await response.Content.ReadAsStringAsync();
            _blog = JsonConvert.DeserializeObject<BlogModel>(jsonStr);
            StateHasChanged();
        }
    }

    private async Task Update()
    {
        var jsonBlog = JsonConvert.SerializeObject(_blog);
        var content = new StringContent(jsonBlog, Encoding.UTF8, Application.Json);
        var response = await httpClient.PutAsync($"api/bLog/{BlogId}", content);
        if (response.IsSuccessStatusCode)
        {
            var message = await response.Content.ReadAsStringAsync();
            await jsRuntime.InvokeVoidAsync("alert", message);
            nav.NavigateTo("/blog");
        }
    }
}